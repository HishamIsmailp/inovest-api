generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  passwordHash  String?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  role          UserRole?
  projectsOwned Project[]  @relation("EntrepreneurProjects")
  ratings       ProjectRating[]
  interests     ProjectInterest[]
  messages      Message[]
  chats         ChatParticipant[]
  notifications Notification[]
  payments      Payment[]
}

model UserRole {
  id          String    @id @default(uuid())
  userId      String    @unique
  currentRole Role      @default(ENTREPRENEUR)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
}

enum Role {
  INVESTOR
  ENTREPRENEUR
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())

  projects    Project[]
}

model Project {
  id                String    @id @default(uuid())
  entrepreneurId    String
  categoryId        String
  title            String
  abstract         String
  expectedInvestment Decimal
  status           ProjectStatus @default(AVAILABLE)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  entrepreneur     User      @relation("EntrepreneurProjects", fields: [entrepreneurId], references: [id])
  category        Category  @relation(fields: [categoryId], references: [id])
  images          ProjectImage[]
  ratings         ProjectRating[]
  interests       ProjectInterest[]
  chats           Chat[]
  payments        Payment[]
}

enum ProjectStatus {
  AVAILABLE
  UNDER_DISCUSSION
  BOOKED
  INVESTED
}

model ProjectImage {
  id          String    @id @default(uuid())
  projectId   String
  imageUrl    String
  createdAt   DateTime  @default(now())

  project     Project   @relation(fields: [projectId], references: [id])
}

model ProjectRating {
  id          String    @id @default(uuid())
  projectId   String
  investorId  String
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())

  project     Project   @relation(fields: [projectId], references: [id])
  investor    User      @relation(fields: [investorId], references: [id])

  @@unique([projectId, investorId])
}

model ProjectInterest {
  id          String    @id @default(uuid())
  projectId   String
  investorId  String
  status      InterestStatus
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  project     Project   @relation(fields: [projectId], references: [id])
  investor    User      @relation(fields: [investorId], references: [id])

  @@unique([projectId, investorId])
}

enum InterestStatus {
  INTERESTED
  DISCUSSING
  INVESTED
}

model Chat {
  id          String    @id @default(uuid())
  projectId   String
  createdAt   DateTime  @default(now())

  project     Project   @relation(fields: [projectId], references: [id])
  participants ChatParticipant[]
  messages    Message[]
}

model ChatParticipant {
  id          String    @id @default(uuid())
  chatId      String
  userId      String
  createdAt   DateTime  @default(now())

  chat        Chat      @relation(fields: [chatId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([chatId, userId])
}

model Message {
  id          String    @id @default(uuid())
  chatId      String
  senderId    String
  messageType MessageType
  content     String
  createdAt   DateTime  @default(now())

  chat        Chat      @relation(fields: [chatId], references: [id])
  sender      User      @relation(fields: [senderId], references: [id])
}

enum MessageType {
  TEXT
  IMAGE
  VOICE
}

model Notification {
  id          String    @id @default(uuid())
  userId      String
  type        String
  title       String
  message     String
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
}

model Payment {
  id          String    @id @default(uuid())
  projectId   String
  investorId  String
  amount      Decimal
  status      PaymentStatus
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  project     Project   @relation(fields: [projectId], references: [id])
  investor    User      @relation(fields: [investorId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}